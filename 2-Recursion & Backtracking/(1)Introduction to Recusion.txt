[1]Print Decreasing
1. You are given a positive number n. 
2. You are required to print the counting from n to 1.
3. You are required to not use any loops. Complete the body of print Decreasing function to achieve it.

Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.



public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        printDecreasing(n);
    }

    public static void printDecreasing(int n) {
        if(n == 0){
            return;
        }
        System.out.println(n);
        printDecreasing(n - 1);
    }

}


---------------------------------------------------------------------------------------------------
[2] Print Increasing
1. You are given a positive number n. 
2. You are required to print the counting from 1 to n.
3. You are required to not use any loops. Complete the body of print Increasing function to achieve it. Don't change the signature of the function.

Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.



public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        printIncreasing(n);
    }

    public static void printIncreasing(int n) {
        if(n == 0){
            return;
        }
        printIncreasing(n - 1);
        System.out.println(n);
    }
}
---------------------------------------------------------------------------------------------------
[3]Print Decreasing Increasing 
1. You are given a positive number n. 
2. You are required to print the counting from n to 1 and back to n again.
3. You are required to not use any loops. Complete the body of pdi function to achieve it. Don't change the signature of the function.



Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        pdi(n);
    }

    public static void pdi(int n) {
        if(n == 0){
            return;
        }
        System.out.println(n);
        pdi(n - 1);
        System.out.println(n);
    }
}
---------------------------------------------------------------------------------------------------
[4] Print Factorial
1. You are given a number n.
2. You are required to calculate the factorial of the number. Don't change the signature of factorial function.



Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int f = factorial(n);
        System.out.println(f);
    }

    public static int factorial(int n) {
        if (n == 0) {
	    return 1;			
	//we can also return 1 when (n == 1)
        }
        int fnm1 = factorial(n - 1);
        int f = n * fnm1;
        return f;
    }
}

---------------------------------------------------------------------------------------------------
[5] Power-linear(Print X raised to n)
1. You are given a number x.
2. You are given another number n.
3. You are required to calculate x raised to the power n. Don't change the signature of power function .



Scanner scn = new Scanner(System.in);
        int x = scn.nextInt();
        int n = scn.nextInt();
        int p = power(x, n);
        System.out.println(p);
    }

    public static int power(int x, int n) {
        if(n == 0){
            return 1;
        }
        int pnm1 = power(x, n-1);       
        int p = x * pnm1;
        return p;
    }
}
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------