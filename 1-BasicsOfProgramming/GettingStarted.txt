[1] Question
1. You've to check whether a given number is prime or not.
2. Take a number "t" as input representing count of input numbers to be tested.
3. Take a number "n" as input "t" number of times.
4. For each input value of n, print "prime" if the number is prime and "not prime" otherwise.


Scanner scn = new Scanner(System.in);

        int t = scn.nextInt();	//no of inputs
        for (int i = 0; i < t; i++) {
            int n = scn.nextInt();

            int count = 0;
            for(int div = 2; div * div <= n; div++) {		//logic - number apne square root k pehle pehle divide nahi hua to, phir wo aage bhi divide nahi hoga
                // apan 2 se start karke number k sqare root tak chalenge
                if (n % div == 0) {		//agar yaha tak koi divide nahi kar paaya, matlab no. prime hai
                    count++;
		    break;			//break issilye, taaki agar koi no. divdie ho jae, toh aage na jae coz we know it is'nt prime.	

                }
            }
            
            if (count == 0) {
                System.out.println("prime");
            } else {
                System.out.println("not prime");
            }
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[2]Question:

You have to print all prime numbers between a range.

Take as input "low", the lower limit of range.

Take as input "high", the higher limit of range.

For the range print all the primes numbers between low and high (both included).


Scanner scn = new Scanner(System.in);
        int l = scn.nextInt();
        int h = scn.nextInt();
        
        for(int i = l; i <= h; i++){
            int count = 0;
            for(int j = 2; j * j <= i; j++){
                if(i % j == 0){
                    count++;
                    break;
                }
            }// hamesha for loop mai ulajh jaata hu main
                if(count == 0){
                    System.out.println(i);
                }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[3]Question
1. You've to print first n fibonacci numbers.
2. Take as input "n", the count of fibonacci numbers to print.
3. Print first n fibonacci numbers.


Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        int a = 0;
        int b = 1;
        for(int i = 0; i < n; i++){
            System.out.println(a);
            int c = a + b;
            
            a = b;
            b = c;
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------
[4]Question
1. You've to count the number of digits in a number.
2. Take as input "n", the number for which the digits has to be counted.
3. Print the digits in that number.


Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        int count = 0;

        while(n != 0){
            n = n / 10;
            count++;
        }
        System.out.println(count);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[5]Question
1. You've to display the digits of a number.
2. Take as input "n", the number for which digits have to be displayed.
3. Print the digits of the number line-wise.


Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int temp = n;
        int power = 1;
        while (temp >= 10) {
            temp = temp / 10;
            power *= 10;
        }
        
        while(n != 0){
            int dig = n / power;
            System.out.println(dig);
            n = n % power;
            power /= 10;
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[6]
Question
1. You've to display the digits of a number in reverse.
2. Take as input "n", the number for which digits have to be display in reverse.
3. Print the digits of the number line-wise, but in reverse order.


Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        while (n != 0) {
            int dig = n % 10;
            System.out.println(dig);
            n = n / 10;
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[7]
Question
1. You are given a number following certain constraints.
2. The key constraint is if the number is 5 digits long, it'll contain all the digits from 1 to 5 without missing any and without repeating any. e.g. 23415 is a 5 digit long number containing all digits from 1 to 5 without missing and repeating any digit from 1 to 5.Take a look at few other valid numbers - 624135, 81456273 etc.Here are a few invalid numbers - 139, 7421357 etc.
3. The inverse of a number is defined as the number created by interchanging the face value and index of digits of number.e.g. for 426135 (reading from right to left, 5 is in place 1, 3 is in place 2, 1 is in place 3, 6 is in place 4, 2 is in place 5 and 4 is in place 6), the inverse will be 416253 (reading from right to left, 3 is in place 1, 5 is in place 2,2 is in place 3, 6 is in place 4, 1 is in place 5 and 4 is in place 6) More examples - inverse of 2134 is 1243 and inverse of 24153 is 24153    
4. Take as input number "n", assume that the number will follow constraints.
5. Print it's inverse.



Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        int temp = n;
        int count = 0;
        
        while(temp != 0){
            temp = temp / 10;
            count++;
        }
        
        int num = 1;
        int sum = 0;
        for(int i = 0; i < count; i++){
            int pos = n % 10;
            sum = sum + (num * (int)Math.pow(10, pos-1));
            n = n / 10;
            num++;
        }
        System.out.println(sum);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[8]
Question
1. You are given two numbers n and k. You are required to rotate n, k times to the right. If k is positive, rotate to the right i.e. remove rightmost digit and make it leftmost. Do the reverse for negative value of k. Also k can have an absolute value larger than number of digits in n.
2. Take as input n and k.
3. Print the rotated number.
4. Note - Assume that the number of rotations will not cause leading 0's in the result. e.g. such an input will not be given
   n = 12340056
   k = 3
   r = 05612340


Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        
        int temp = n, count = 0;
        while(temp != 0){
            temp = temp / 10;
            count++;
        }
        
        k = k % count;
        if(k < 0){
            k += count;
        }
        
        int leading = n % (int)Math.pow(10, k);
        int trailing = n / (int)Math.pow(10, k);
        
        leading = leading * (int)Math.pow(10, count-k);
        int sum = leading + trailing;

        System.out.println(sum);
        
    }
}



================================OR=============================
Scanner scn = new Scanner(System.in);
    	int n = scn.nextInt();
    	int k = scn.nextInt();
    	
    	int temp = n;
    	int count = 0;
    	while(temp != 0) {
    		temp = temp / 10;
    		count++;
    	}
    	
    	k = k % count;
    	if(k < 0) {
    		k += count;
    	}
    	
    	int rotated = 0;
    	int div = (int)Math.pow(10, k);
    	
    	int trailing = n / div;
    	rotated += trailing;

    	int leading = n % div;

    	int tleading = leading;
    	int tcount = 0;
    	while(tleading != 0) {
    		tleading /= 10;
    		tcount++;
    	}
    	
    	leading *= (int)Math.pow(10, (count - tcount));
    	
    	rotated += leading;
    	System.out.println(rotated);
    	    	
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[9]
Question
1. You are required to print the Greatest Common Divisor (GCD) of two numbers.
2. You are also required to print the Lowest Common Multiple (LCM) of the same numbers.
3. Take input "num1" and "num2" as the two numbers.
4. Print their GCD and LCM.



Scanner scn = new Scanner(System.in);
        int n1 = scn.nextInt();
        int n2 = scn.nextInt();
        
        int tempn1 = n1;
        int tempn2 = n2;
        
        while(tempn1 % tempn2 != 0){
            int rem = tempn1 % tempn2;
            tempn1 = tempn2;
            tempn2 = rem;
        }
        
        int gcd = tempn2;
        int lcm = (n1 * n2) / gcd;
        
        System.out.println(gcd);
        System.out.println(lcm);
        
    }
}

---------------------------------------------------------------------------------------------------------------
[10]Question
1. You are required to display the prime factorization of a number.
    2. Take as input a number n.
    3. Print all its prime factors from smallest to largest.



Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        for(int i=2; i <= n; i++){
		//just like the prime no. problem
           while(n % i == 0){		// jab tak it is fully dividing the divisor
               System.out.print(i+" ");
               n = n / i;
            }
        }
    }
}

====================================OR==============================================
Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        for(int i=2; i * i<= n; i++){		// here we are going till root n
		//just like the prime no. problem
           while(n % i == 0){		// jab tak it is fully dividing the divisor
               System.out.print(i+" ");
               n = n / i;
            }
        }
		//Agar root n tak 'n' == 1, nahi hua, then hume pata hai ki the last factor will be that no. only
		// Ex- prime fact. of 46 - 2,23
		if(n != 1){
		System.out.print(n);		
	}
    }
}
---------------------------------------------------------------------------------------------------------------
[11]Question
1. You are required to check if a given set of numbers is a valid pythagorean triplet.
2. Take as input three numbers a, b and c.
3. Print true if they can form a pythagorean triplet and false otherwise.


Scanner scn = new Scanner(System.in);
        long a = scn.nextInt();
        long b = scn.nextInt();
        long c = scn.nextInt();

        // we can also find max by using ternary operator

        long max = a;
        if(b >= max)
            max = b;
        
        if(c >= max)
            max = c;
        
        
        if(max == a){
            System.out.println(b * b + c * c == a * a);
        }
        else if(max == b){
            System.out.println(a * a + c * c == b * b);
        }
        else if(max == c){
            System.out.println(b * b + a * a == c * c);
        }
    }
}
---------------------------------------------------------------------------------------------------------------
[12]Question
1. You are given n number of bulbs. They are all switched off. A weird fluctuation in voltage hits the circuit n times. In the 1st fluctuation all bulbs are toggled, in the 2nd fluctuation every 2nd bulb is toggled, in the 3rd fluctuation every 3rd bulb is toggled and so on. You've to find which bulbs will be switched on after n fluctuations.
2. Take as input a number n, representing the number of bulbs.
3. Print all the bulbs that will be on after the nth fluctuation in voltage.


Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        for(int i = 1; i * i <= n; i++){	//idher jin bulbs ko odd number of fluctuations mil rahi hain, wo last tak on rahenge
            System.out.println(i*i);
        }
    }
}